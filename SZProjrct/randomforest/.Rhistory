names(testdata)[names(testdata)=="[Ruminococcus]_torques"]="R_t"
names(testdata)[names(testdata)=="[Clostridium]_bartlettii"]="C_b"
names(testdata)[names(testdata)=="Enterobacter_hormaechei/cloacae"]="Ehc"
names(testdata)[names(testdata)=="Klebsiella_variicola/pneumoniae"]="Kvp"
traindata1 <- traindata[,-c(362)]
testdata1 <- testdata[,-c(362)]
set.seed(1234)
tp <- c(10: 30)
fp <- c(10: 30)
for (i in 10:30){
rf <- randomForest(as.factor(state2)~., data = traindata1, ntree = 400, mtry = i)
PredictionWithClass <- predict(rf, testdata1, type = 'class')
t <- table(Predictions=PredictionWithClass, actual=testdata1$state2)
tp[i-9] <- t[1,1]/(t[1,1]+t[2,1]);
fp[i-9] <- t[1,2]/(t[1,2]+t[2,2]);
}
tp_list <- sort(tp,index.return= TRUE)
tp <- tp_list$x
ind_tp <- tp_list$ix
temp <- c(1:21)
for (j in 1:21){
temp[j] = fp[ind_tp(j)]
}
fp <- temp
plot(tp,fp, type = "o", xlab = "true positive rate", ylab = "false positive rate")
library(randomForest)
# data process, get the training and testing data
motu <- read.table("../../SZData/mOTU.0.05.profile",header = 1,row.names = 1)
state <- read.table("../../SZData/state171.txt",header = 1,row.names = 1)
colnames(motu) <- gsub("\\.","-",colnames(motu))
control_motu <- motu[,which(state$state2==0)]
set.seed(0)
train <- sample(1:81,44)
train_control <- control_motu[,train]
test <- setdiff(1:81,train)
test_control <- control_motu[,test]
train_case <- motu[,which(state$state3==1)]
test_case <- motu[,which(state$state3==2)]
train.x <- cbind(train_control,train_case)
test.x <- cbind(test_control,test_case)
train.y <- state[pmatch(colnames(train.x),rownames(state)),]
test.y <-  state[pmatch(colnames(test.x),rownames(state)),]
train.x <- as.data.frame(t(train.x))
test.x <- as.data.frame(t(test.x))
traindata <- cbind(train.x,train.y)
testdata <- cbind(test.x, test.y)
names(traindata)[names(traindata)=="Bifidobacterium_catenulatum-Bifidobacterium_pseudocatenulatum_complex"]="BcBp"
names(traindata)[names(traindata)=="Bacteroides_dorei/vulgatus"]="Bdv"
names(traindata)[names(traindata)=="Cronobacter_sakazakii/turicensis"]="Cst"
names(traindata)[names(traindata)=="Bacillus_anthracis/cereus/thuringiensis"]="Bact"
names(traindata)[names(traindata)=="butyrate-producing_bacterium"]="bpb"
names(traindata)[names(traindata)=="[Ruminococcus]_gnavus"]="R_g"
names(traindata)[names(traindata)=="butyrate-producing_bacterium_SS3/4"]="bpb34"
names(traindata)[names(traindata)=="Ruminococcus_sp._SR1/5"]="rsr15"
names(traindata)[names(traindata)=="[Ruminococcus]_obeum"]="R_o"
names(traindata)[names(traindata)=="Clostridium_sp._L2-50"]="Csp50"
names(traindata)[names(traindata)=="[Ruminococcus]_torques"]="R_t"
names(traindata)[names(traindata)=="[Clostridium]_bartlettii"]="C_b"
names(traindata)[names(traindata)=="Enterobacter_hormaechei/cloacae"]="Ehc"
names(traindata)[names(traindata)=="Klebsiella_variicola/pneumoniae"]="Kvp"
names(testdata)[names(testdata)=="Bifidobacterium_catenulatum-Bifidobacterium_pseudocatenulatum_complex"]="BcBp"
names(testdata)[names(testdata)=="Bacteroides_dorei/vulgatus"]="Bdv"
names(testdata)[names(testdata)=="Cronobacter_sakazakii/turicensis"]="Cst"
names(testdata)[names(testdata)=="Bacillus_anthracis/cereus/thuringiensis"]="Bact"
names(testdata)[names(testdata)=="butyrate-producing_bacterium"]="bpb"
names(testdata)[names(testdata)=="[Ruminococcus]_gnavus"]="R_g"
names(testdata)[names(testdata)=="butyrate-producing_bacterium_SS3/4"]="bpb34"
names(testdata)[names(testdata)=="Ruminococcus_sp._SR1/5"]="rsr15"
names(testdata)[names(testdata)=="[Ruminococcus]_obeum"]="R_o"
names(testdata)[names(testdata)=="Clostridium_sp._L2-50"]="Csp50"
names(testdata)[names(testdata)=="[Ruminococcus]_torques"]="R_t"
names(testdata)[names(testdata)=="[Clostridium]_bartlettii"]="C_b"
names(testdata)[names(testdata)=="Enterobacter_hormaechei/cloacae"]="Ehc"
names(testdata)[names(testdata)=="Klebsiella_variicola/pneumoniae"]="Kvp"
traindata1 <- traindata[,-c(362)]
testdata1 <- testdata[,-c(362)]
set.seed(1234)
tp <- c(10: 30)
fp <- c(10: 30)
for (i in 10:30){
rf <- randomForest(as.factor(state2)~., data = traindata1, ntree = 400, mtry = i)
PredictionWithClass <- predict(rf, testdata1, type = 'class')
t <- table(Predictions=PredictionWithClass, actual=testdata1$state2)
tp[i-9] <- t[1,1]/(t[1,1]+t[2,1]);
fp[i-9] <- t[1,2]/(t[1,2]+t[2,2]);
}
library(randomForest)
# data process, get the training and testing data
motu <- read.table("../../SZData/mOTU.0.05.profile",header = 1,row.names = 1)
state <- read.table("../../SZData/state171.txt",header = 1,row.names = 1)
colnames(motu) <- gsub("\\.","-",colnames(motu))
control_motu <- motu[,which(state$state2==0)]
set.seed(0)
train <- sample(1:81,44)
train_control <- control_motu[,train]
test <- setdiff(1:81,train)
test_control <- control_motu[,test]
train_case <- motu[,which(state$state3==1)]
test_case <- motu[,which(state$state3==2)]
train.x <- cbind(train_control,train_case)
test.x <- cbind(test_control,test_case)
train.y <- state[pmatch(colnames(train.x),rownames(state)),]
test.y <-  state[pmatch(colnames(test.x),rownames(state)),]
train.x <- as.data.frame(t(train.x))
test.x <- as.data.frame(t(test.x))
traindata <- cbind(train.x,train.y)
testdata <- cbind(test.x, test.y)
names(traindata)[names(traindata)=="Bifidobacterium_catenulatum-Bifidobacterium_pseudocatenulatum_complex"]="BcBp"
names(traindata)[names(traindata)=="Bacteroides_dorei/vulgatus"]="Bdv"
names(traindata)[names(traindata)=="Cronobacter_sakazakii/turicensis"]="Cst"
names(traindata)[names(traindata)=="Bacillus_anthracis/cereus/thuringiensis"]="Bact"
names(traindata)[names(traindata)=="butyrate-producing_bacterium"]="bpb"
names(traindata)[names(traindata)=="[Ruminococcus]_gnavus"]="R_g"
names(traindata)[names(traindata)=="butyrate-producing_bacterium_SS3/4"]="bpb34"
names(traindata)[names(traindata)=="Ruminococcus_sp._SR1/5"]="rsr15"
names(traindata)[names(traindata)=="[Ruminococcus]_obeum"]="R_o"
names(traindata)[names(traindata)=="Clostridium_sp._L2-50"]="Csp50"
names(traindata)[names(traindata)=="[Ruminococcus]_torques"]="R_t"
names(traindata)[names(traindata)=="[Clostridium]_bartlettii"]="C_b"
names(traindata)[names(traindata)=="Enterobacter_hormaechei/cloacae"]="Ehc"
names(traindata)[names(traindata)=="Klebsiella_variicola/pneumoniae"]="Kvp"
names(testdata)[names(testdata)=="Bifidobacterium_catenulatum-Bifidobacterium_pseudocatenulatum_complex"]="BcBp"
names(testdata)[names(testdata)=="Bacteroides_dorei/vulgatus"]="Bdv"
names(testdata)[names(testdata)=="Cronobacter_sakazakii/turicensis"]="Cst"
names(testdata)[names(testdata)=="Bacillus_anthracis/cereus/thuringiensis"]="Bact"
names(testdata)[names(testdata)=="butyrate-producing_bacterium"]="bpb"
names(testdata)[names(testdata)=="[Ruminococcus]_gnavus"]="R_g"
names(testdata)[names(testdata)=="butyrate-producing_bacterium_SS3/4"]="bpb34"
names(testdata)[names(testdata)=="Ruminococcus_sp._SR1/5"]="rsr15"
names(testdata)[names(testdata)=="[Ruminococcus]_obeum"]="R_o"
names(testdata)[names(testdata)=="Clostridium_sp._L2-50"]="Csp50"
names(testdata)[names(testdata)=="[Ruminococcus]_torques"]="R_t"
names(testdata)[names(testdata)=="[Clostridium]_bartlettii"]="C_b"
names(testdata)[names(testdata)=="Enterobacter_hormaechei/cloacae"]="Ehc"
names(testdata)[names(testdata)=="Klebsiella_variicola/pneumoniae"]="Kvp"
traindata1 <- traindata[,-c(362)]
testdata1 <- testdata[,-c(362)]
set.seed(1234)
tp <- c(10: 30)
fp <- c(10: 30)
for (i in 10:30){
rf <- randomForest(as.factor(state2)~., data = traindata1, ntree = 400, mtry = i)
PredictionWithClass <- predict(rf, testdata1, type = 'class')
t <- table(Predictions=PredictionWithClass, actual=testdata1$state2)
tp[i-9] <- t[1,1]/(t[1,1]+t[2,1]);
fp[i-9] <- t[1,2]/(t[1,2]+t[2,2]);
}
tp_list <- sort(tp,index.return= TRUE)
tp <- tp_list$x
ind_tp <- tp_list$ix
temp <- c(1:21)
for (j in 1:21){
temp[j] <- fp[ind_tp(j)]
}
fp <- temp
plot(tp,fp, type = "o", xlab = "true positive rate", ylab = "false positive rate")
library(randomForest)
# data process, get the training and testing data
motu <- read.table("../../SZData/mOTU.0.05.profile",header = 1,row.names = 1)
state <- read.table("../../SZData/state171.txt",header = 1,row.names = 1)
colnames(motu) <- gsub("\\.","-",colnames(motu))
control_motu <- motu[,which(state$state2==0)]
set.seed(0)
train <- sample(1:81,44)
train_control <- control_motu[,train]
test <- setdiff(1:81,train)
test_control <- control_motu[,test]
train_case <- motu[,which(state$state3==1)]
test_case <- motu[,which(state$state3==2)]
train.x <- cbind(train_control,train_case)
test.x <- cbind(test_control,test_case)
train.y <- state[pmatch(colnames(train.x),rownames(state)),]
test.y <-  state[pmatch(colnames(test.x),rownames(state)),]
train.x <- as.data.frame(t(train.x))
test.x <- as.data.frame(t(test.x))
traindata <- cbind(train.x,train.y)
testdata <- cbind(test.x, test.y)
names(traindata)[names(traindata)=="Bifidobacterium_catenulatum-Bifidobacterium_pseudocatenulatum_complex"]="BcBp"
names(traindata)[names(traindata)=="Bacteroides_dorei/vulgatus"]="Bdv"
names(traindata)[names(traindata)=="Cronobacter_sakazakii/turicensis"]="Cst"
names(traindata)[names(traindata)=="Bacillus_anthracis/cereus/thuringiensis"]="Bact"
names(traindata)[names(traindata)=="butyrate-producing_bacterium"]="bpb"
names(traindata)[names(traindata)=="[Ruminococcus]_gnavus"]="R_g"
names(traindata)[names(traindata)=="butyrate-producing_bacterium_SS3/4"]="bpb34"
names(traindata)[names(traindata)=="Ruminococcus_sp._SR1/5"]="rsr15"
names(traindata)[names(traindata)=="[Ruminococcus]_obeum"]="R_o"
names(traindata)[names(traindata)=="Clostridium_sp._L2-50"]="Csp50"
names(traindata)[names(traindata)=="[Ruminococcus]_torques"]="R_t"
names(traindata)[names(traindata)=="[Clostridium]_bartlettii"]="C_b"
names(traindata)[names(traindata)=="Enterobacter_hormaechei/cloacae"]="Ehc"
names(traindata)[names(traindata)=="Klebsiella_variicola/pneumoniae"]="Kvp"
names(testdata)[names(testdata)=="Bifidobacterium_catenulatum-Bifidobacterium_pseudocatenulatum_complex"]="BcBp"
names(testdata)[names(testdata)=="Bacteroides_dorei/vulgatus"]="Bdv"
names(testdata)[names(testdata)=="Cronobacter_sakazakii/turicensis"]="Cst"
names(testdata)[names(testdata)=="Bacillus_anthracis/cereus/thuringiensis"]="Bact"
names(testdata)[names(testdata)=="butyrate-producing_bacterium"]="bpb"
names(testdata)[names(testdata)=="[Ruminococcus]_gnavus"]="R_g"
names(testdata)[names(testdata)=="butyrate-producing_bacterium_SS3/4"]="bpb34"
names(testdata)[names(testdata)=="Ruminococcus_sp._SR1/5"]="rsr15"
names(testdata)[names(testdata)=="[Ruminococcus]_obeum"]="R_o"
names(testdata)[names(testdata)=="Clostridium_sp._L2-50"]="Csp50"
names(testdata)[names(testdata)=="[Ruminococcus]_torques"]="R_t"
names(testdata)[names(testdata)=="[Clostridium]_bartlettii"]="C_b"
names(testdata)[names(testdata)=="Enterobacter_hormaechei/cloacae"]="Ehc"
names(testdata)[names(testdata)=="Klebsiella_variicola/pneumoniae"]="Kvp"
traindata1 <- traindata[,-c(362)]
testdata1 <- testdata[,-c(362)]
set.seed(1234)
tp <- c(10: 30)
fp <- c(10: 30)
for (i in 10:30){
rf <- randomForest(as.factor(state2)~., data = traindata1, ntree = 400, mtry = i)
PredictionWithClass <- predict(rf, testdata1, type = 'class')
t <- table(Predictions=PredictionWithClass, actual=testdata1$state2)
tp[i-9] <- t[1,1]/(t[1,1]+t[2,1]);
fp[i-9] <- t[1,2]/(t[1,2]+t[2,2]);
}
tp_list <- sort(tp,index.return= TRUE)
tp <- tp_list$x
ind_tp <- tp_list$ix
temp <- c(1:21)
for (j in 1:21){
temp[j] <- fp[ind_tp[j]]
}
fp <- temp
plot(tp,fp, type = "o", xlab = "true positive rate", ylab = "false positive rate")
t
library(randomForest)
# data process, get the training and testing data
motu <- read.table("../../SZData/mOTU.0.05.profile",header = 1,row.names = 1)
state <- read.table("../../SZData/state171.txt",header = 1,row.names = 1)
colnames(motu) <- gsub("\\.","-",colnames(motu))
control_motu <- motu[,which(state$state2==0)]
set.seed(0)
train <- sample(1:81,44)
train_control <- control_motu[,train]
test <- setdiff(1:81,train)
test_control <- control_motu[,test]
train_case <- motu[,which(state$state3==1)]
test_case <- motu[,which(state$state3==2)]
train.x <- cbind(train_control,train_case)
test.x <- cbind(test_control,test_case)
train.y <- state[pmatch(colnames(train.x),rownames(state)),]
test.y <-  state[pmatch(colnames(test.x),rownames(state)),]
train.x <- as.data.frame(t(train.x))
test.x <- as.data.frame(t(test.x))
traindata <- cbind(train.x,train.y)
testdata <- cbind(test.x, test.y)
names(traindata)[names(traindata)=="Bifidobacterium_catenulatum-Bifidobacterium_pseudocatenulatum_complex"]="BcBp"
names(traindata)[names(traindata)=="Bacteroides_dorei/vulgatus"]="Bdv"
names(traindata)[names(traindata)=="Cronobacter_sakazakii/turicensis"]="Cst"
names(traindata)[names(traindata)=="Bacillus_anthracis/cereus/thuringiensis"]="Bact"
names(traindata)[names(traindata)=="butyrate-producing_bacterium"]="bpb"
names(traindata)[names(traindata)=="[Ruminococcus]_gnavus"]="R_g"
names(traindata)[names(traindata)=="butyrate-producing_bacterium_SS3/4"]="bpb34"
names(traindata)[names(traindata)=="Ruminococcus_sp._SR1/5"]="rsr15"
names(traindata)[names(traindata)=="[Ruminococcus]_obeum"]="R_o"
names(traindata)[names(traindata)=="Clostridium_sp._L2-50"]="Csp50"
names(traindata)[names(traindata)=="[Ruminococcus]_torques"]="R_t"
names(traindata)[names(traindata)=="[Clostridium]_bartlettii"]="C_b"
names(traindata)[names(traindata)=="Enterobacter_hormaechei/cloacae"]="Ehc"
names(traindata)[names(traindata)=="Klebsiella_variicola/pneumoniae"]="Kvp"
names(testdata)[names(testdata)=="Bifidobacterium_catenulatum-Bifidobacterium_pseudocatenulatum_complex"]="BcBp"
names(testdata)[names(testdata)=="Bacteroides_dorei/vulgatus"]="Bdv"
names(testdata)[names(testdata)=="Cronobacter_sakazakii/turicensis"]="Cst"
names(testdata)[names(testdata)=="Bacillus_anthracis/cereus/thuringiensis"]="Bact"
names(testdata)[names(testdata)=="butyrate-producing_bacterium"]="bpb"
names(testdata)[names(testdata)=="[Ruminococcus]_gnavus"]="R_g"
names(testdata)[names(testdata)=="butyrate-producing_bacterium_SS3/4"]="bpb34"
names(testdata)[names(testdata)=="Ruminococcus_sp._SR1/5"]="rsr15"
names(testdata)[names(testdata)=="[Ruminococcus]_obeum"]="R_o"
names(testdata)[names(testdata)=="Clostridium_sp._L2-50"]="Csp50"
names(testdata)[names(testdata)=="[Ruminococcus]_torques"]="R_t"
names(testdata)[names(testdata)=="[Clostridium]_bartlettii"]="C_b"
names(testdata)[names(testdata)=="Enterobacter_hormaechei/cloacae"]="Ehc"
names(testdata)[names(testdata)=="Klebsiella_variicola/pneumoniae"]="Kvp"
traindata1 <- traindata[,-c(362)]
testdata1 <- testdata[,-c(362)]
set.seed(1234)
tp <- c(10: 30)
fp <- c(10: 30)
for (i in 10:30){
rf <- randomForest(as.factor(state2)~., data = traindata1, ntree = 1000, mtry = i)
PredictionWithClass <- predict(rf, testdata1, type = 'class')
t <- table(Predictions=PredictionWithClass, actual=testdata1$state2)
tp[i-9] <- t[1,1]/(t[1,1]+t[2,1]);
fp[i-9] <- t[1,2]/(t[1,2]+t[2,2]);
}
tp_list <- sort(tp,index.return= TRUE)
tp <- tp_list$x
ind_tp <- tp_list$ix
temp <- c(1:21)
for (j in 1:21){
temp[j] <- fp[ind_tp[j]]
}
fp <- temp
plot(tp,fp, type = "o", xlab = "true positive rate", ylab = "false positive rate")
library(randomForest)
# data process, get the training and testing data
motu <- read.table("../../SZData/mOTU.0.05.profile",header = 1,row.names = 1)
state <- read.table("../../SZData/state171.txt",header = 1,row.names = 1)
colnames(motu) <- gsub("\\.","-",colnames(motu))
control_motu <- motu[,which(state$state2==0)]
set.seed(0)
train <- sample(1:81,44)
train_control <- control_motu[,train]
test <- setdiff(1:81,train)
test_control <- control_motu[,test]
train_case <- motu[,which(state$state3==1)]
test_case <- motu[,which(state$state3==2)]
train.x <- cbind(train_control,train_case)
test.x <- cbind(test_control,test_case)
train.y <- state[pmatch(colnames(train.x),rownames(state)),]
test.y <-  state[pmatch(colnames(test.x),rownames(state)),]
train.x <- as.data.frame(t(train.x))
test.x <- as.data.frame(t(test.x))
traindata <- cbind(train.x,train.y)
testdata <- cbind(test.x, test.y)
names(traindata)[names(traindata)=="Bifidobacterium_catenulatum-Bifidobacterium_pseudocatenulatum_complex"]="BcBp"
names(traindata)[names(traindata)=="Bacteroides_dorei/vulgatus"]="Bdv"
names(traindata)[names(traindata)=="Cronobacter_sakazakii/turicensis"]="Cst"
names(traindata)[names(traindata)=="Bacillus_anthracis/cereus/thuringiensis"]="Bact"
names(traindata)[names(traindata)=="butyrate-producing_bacterium"]="bpb"
names(traindata)[names(traindata)=="[Ruminococcus]_gnavus"]="R_g"
names(traindata)[names(traindata)=="butyrate-producing_bacterium_SS3/4"]="bpb34"
names(traindata)[names(traindata)=="Ruminococcus_sp._SR1/5"]="rsr15"
names(traindata)[names(traindata)=="[Ruminococcus]_obeum"]="R_o"
names(traindata)[names(traindata)=="Clostridium_sp._L2-50"]="Csp50"
names(traindata)[names(traindata)=="[Ruminococcus]_torques"]="R_t"
names(traindata)[names(traindata)=="[Clostridium]_bartlettii"]="C_b"
names(traindata)[names(traindata)=="Enterobacter_hormaechei/cloacae"]="Ehc"
names(traindata)[names(traindata)=="Klebsiella_variicola/pneumoniae"]="Kvp"
names(testdata)[names(testdata)=="Bifidobacterium_catenulatum-Bifidobacterium_pseudocatenulatum_complex"]="BcBp"
names(testdata)[names(testdata)=="Bacteroides_dorei/vulgatus"]="Bdv"
names(testdata)[names(testdata)=="Cronobacter_sakazakii/turicensis"]="Cst"
names(testdata)[names(testdata)=="Bacillus_anthracis/cereus/thuringiensis"]="Bact"
names(testdata)[names(testdata)=="butyrate-producing_bacterium"]="bpb"
names(testdata)[names(testdata)=="[Ruminococcus]_gnavus"]="R_g"
names(testdata)[names(testdata)=="butyrate-producing_bacterium_SS3/4"]="bpb34"
names(testdata)[names(testdata)=="Ruminococcus_sp._SR1/5"]="rsr15"
names(testdata)[names(testdata)=="[Ruminococcus]_obeum"]="R_o"
names(testdata)[names(testdata)=="Clostridium_sp._L2-50"]="Csp50"
names(testdata)[names(testdata)=="[Ruminococcus]_torques"]="R_t"
names(testdata)[names(testdata)=="[Clostridium]_bartlettii"]="C_b"
names(testdata)[names(testdata)=="Enterobacter_hormaechei/cloacae"]="Ehc"
names(testdata)[names(testdata)=="Klebsiella_variicola/pneumoniae"]="Kvp"
traindata1 <- traindata[,-c(362)]
testdata1 <- testdata[,-c(362)]
set.seed(1234)
tp <- c(10: 30)
fp <- c(10: 30)
for (i in 10:30){
rf <- randomForest(as.factor(state2)~., data = traindata1, ntree = 1000, mtry = i)
PredictionWithClass <- predict(rf, testdata1, type = 'class')
t <- table(Predictions=PredictionWithClass, actual=testdata1$state2)
tp[i-9] <- t[1,1]/(t[1,1]+t[2,1]);
fp[i-9] <- t[1,2]/(t[1,2]+t[2,2]);
}
fp_list <- sort(fp,index.return= TRUE)
fp <- fp_list$x
ind_fp <- fp_list$ix
temp <- c(1:21)
for (j in 1:21){
temp[j] <- tp[ind_tp[j]]
}
tp <- temp
plot(fp,tp, type = "o", xlab = "true positive rate", ylab = "false positive rate")
library(randomForest)
# data process, get the training and testing data
motu <- read.table("../../SZData/mOTU.0.05.profile",header = 1,row.names = 1)
state <- read.table("../../SZData/state171.txt",header = 1,row.names = 1)
colnames(motu) <- gsub("\\.","-",colnames(motu))
control_motu <- motu[,which(state$state2==0)]
set.seed(0)
train <- sample(1:81,44)
train_control <- control_motu[,train]
test <- setdiff(1:81,train)
test_control <- control_motu[,test]
train_case <- motu[,which(state$state3==1)]
test_case <- motu[,which(state$state3==2)]
train.x <- cbind(train_control,train_case)
test.x <- cbind(test_control,test_case)
train.y <- state[pmatch(colnames(train.x),rownames(state)),]
test.y <-  state[pmatch(colnames(test.x),rownames(state)),]
train.x <- as.data.frame(t(train.x))
test.x <- as.data.frame(t(test.x))
traindata <- cbind(train.x,train.y)
testdata <- cbind(test.x, test.y)
names(traindata)[names(traindata)=="Bifidobacterium_catenulatum-Bifidobacterium_pseudocatenulatum_complex"]="BcBp"
names(traindata)[names(traindata)=="Bacteroides_dorei/vulgatus"]="Bdv"
names(traindata)[names(traindata)=="Cronobacter_sakazakii/turicensis"]="Cst"
names(traindata)[names(traindata)=="Bacillus_anthracis/cereus/thuringiensis"]="Bact"
names(traindata)[names(traindata)=="butyrate-producing_bacterium"]="bpb"
names(traindata)[names(traindata)=="[Ruminococcus]_gnavus"]="R_g"
names(traindata)[names(traindata)=="butyrate-producing_bacterium_SS3/4"]="bpb34"
names(traindata)[names(traindata)=="Ruminococcus_sp._SR1/5"]="rsr15"
names(traindata)[names(traindata)=="[Ruminococcus]_obeum"]="R_o"
names(traindata)[names(traindata)=="Clostridium_sp._L2-50"]="Csp50"
names(traindata)[names(traindata)=="[Ruminococcus]_torques"]="R_t"
names(traindata)[names(traindata)=="[Clostridium]_bartlettii"]="C_b"
names(traindata)[names(traindata)=="Enterobacter_hormaechei/cloacae"]="Ehc"
names(traindata)[names(traindata)=="Klebsiella_variicola/pneumoniae"]="Kvp"
names(testdata)[names(testdata)=="Bifidobacterium_catenulatum-Bifidobacterium_pseudocatenulatum_complex"]="BcBp"
names(testdata)[names(testdata)=="Bacteroides_dorei/vulgatus"]="Bdv"
names(testdata)[names(testdata)=="Cronobacter_sakazakii/turicensis"]="Cst"
names(testdata)[names(testdata)=="Bacillus_anthracis/cereus/thuringiensis"]="Bact"
names(testdata)[names(testdata)=="butyrate-producing_bacterium"]="bpb"
names(testdata)[names(testdata)=="[Ruminococcus]_gnavus"]="R_g"
names(testdata)[names(testdata)=="butyrate-producing_bacterium_SS3/4"]="bpb34"
names(testdata)[names(testdata)=="Ruminococcus_sp._SR1/5"]="rsr15"
names(testdata)[names(testdata)=="[Ruminococcus]_obeum"]="R_o"
names(testdata)[names(testdata)=="Clostridium_sp._L2-50"]="Csp50"
names(testdata)[names(testdata)=="[Ruminococcus]_torques"]="R_t"
names(testdata)[names(testdata)=="[Clostridium]_bartlettii"]="C_b"
names(testdata)[names(testdata)=="Enterobacter_hormaechei/cloacae"]="Ehc"
names(testdata)[names(testdata)=="Klebsiella_variicola/pneumoniae"]="Kvp"
traindata1 <- traindata[,-c(362)]
testdata1 <- testdata[,-c(362)]
set.seed(1234)
tp <- c(1: 50)
fp <- c(1: 50)
for (i in 1:50){
rf <- randomForest(as.factor(state2)~., data = traindata1, ntree = 1000, mtry = i)
PredictionWithClass <- predict(rf, testdata1, type = 'class')
t <- table(Predictions=PredictionWithClass, actual=testdata1$state2)
tp[i-9] <- t[1,1]/(t[1,1]+t[2,1]);
fp[i-9] <- t[1,2]/(t[1,2]+t[2,2]);
}
fp_list <- sort(fp,index.return= TRUE)
fp <- fp_list$x
ind_fp <- fp_list$ix
temp <- c(1:50)
for (j in 1:50){
temp[j] <- tp[ind_tp[j]]
}
tp <- temp
plot(fp,tp, type = "o", xlab = "true positive rate", ylab = "false positive rate")
library(randomForest)
# data process, get the training and testing data
motu <- read.table("../../SZData/mOTU.0.05.profile",header = 1,row.names = 1)
state <- read.table("../../SZData/state171.txt",header = 1,row.names = 1)
colnames(motu) <- gsub("\\.","-",colnames(motu))
control_motu <- motu[,which(state$state2==0)]
set.seed(0)
train <- sample(1:81,44)
train_control <- control_motu[,train]
test <- setdiff(1:81,train)
test_control <- control_motu[,test]
train_case <- motu[,which(state$state3==1)]
test_case <- motu[,which(state$state3==2)]
train.x <- cbind(train_control,train_case)
test.x <- cbind(test_control,test_case)
train.y <- state[pmatch(colnames(train.x),rownames(state)),]
test.y <-  state[pmatch(colnames(test.x),rownames(state)),]
train.x <- as.data.frame(t(train.x))
test.x <- as.data.frame(t(test.x))
traindata <- cbind(train.x,train.y)
testdata <- cbind(test.x, test.y)
names(traindata)[names(traindata)=="Bifidobacterium_catenulatum-Bifidobacterium_pseudocatenulatum_complex"]="BcBp"
names(traindata)[names(traindata)=="Bacteroides_dorei/vulgatus"]="Bdv"
names(traindata)[names(traindata)=="Cronobacter_sakazakii/turicensis"]="Cst"
names(traindata)[names(traindata)=="Bacillus_anthracis/cereus/thuringiensis"]="Bact"
names(traindata)[names(traindata)=="butyrate-producing_bacterium"]="bpb"
names(traindata)[names(traindata)=="[Ruminococcus]_gnavus"]="R_g"
names(traindata)[names(traindata)=="butyrate-producing_bacterium_SS3/4"]="bpb34"
names(traindata)[names(traindata)=="Ruminococcus_sp._SR1/5"]="rsr15"
names(traindata)[names(traindata)=="[Ruminococcus]_obeum"]="R_o"
names(traindata)[names(traindata)=="Clostridium_sp._L2-50"]="Csp50"
names(traindata)[names(traindata)=="[Ruminococcus]_torques"]="R_t"
names(traindata)[names(traindata)=="[Clostridium]_bartlettii"]="C_b"
names(traindata)[names(traindata)=="Enterobacter_hormaechei/cloacae"]="Ehc"
names(traindata)[names(traindata)=="Klebsiella_variicola/pneumoniae"]="Kvp"
names(testdata)[names(testdata)=="Bifidobacterium_catenulatum-Bifidobacterium_pseudocatenulatum_complex"]="BcBp"
names(testdata)[names(testdata)=="Bacteroides_dorei/vulgatus"]="Bdv"
names(testdata)[names(testdata)=="Cronobacter_sakazakii/turicensis"]="Cst"
names(testdata)[names(testdata)=="Bacillus_anthracis/cereus/thuringiensis"]="Bact"
names(testdata)[names(testdata)=="butyrate-producing_bacterium"]="bpb"
names(testdata)[names(testdata)=="[Ruminococcus]_gnavus"]="R_g"
names(testdata)[names(testdata)=="butyrate-producing_bacterium_SS3/4"]="bpb34"
names(testdata)[names(testdata)=="Ruminococcus_sp._SR1/5"]="rsr15"
names(testdata)[names(testdata)=="[Ruminococcus]_obeum"]="R_o"
names(testdata)[names(testdata)=="Clostridium_sp._L2-50"]="Csp50"
names(testdata)[names(testdata)=="[Ruminococcus]_torques"]="R_t"
names(testdata)[names(testdata)=="[Clostridium]_bartlettii"]="C_b"
names(testdata)[names(testdata)=="Enterobacter_hormaechei/cloacae"]="Ehc"
names(testdata)[names(testdata)=="Klebsiella_variicola/pneumoniae"]="Kvp"
traindata1 <- traindata[,-c(362)]
testdata1 <- testdata[,-c(362)]
set.seed(1234)
tp <- c(10: 30)
fp <- c(10: 30)
for (i in 10:30){
rf <- randomForest(as.factor(state2)~., data = traindata1, ntree = 1000, mtry = i)
PredictionWithClass <- predict(rf, testdata1, type = 'class')
t <- table(Predictions=PredictionWithClass, actual=testdata1$state2)
tp[i-9] <- t[1,1]/(t[1,1]+t[2,1]);
fp[i-9] <- t[1,2]/(t[1,2]+t[2,2]);
}
fp_list <- sort(fp,index.return= TRUE)
fp <- fp_list$x
ind_fp <- fp_list$ix
temp <- c(10:30)
for (j in 1:21){
temp[j] <- tp[ind_tp[j]]
}
tp <- temp
plot(fp,tp, type = "o", xlab = "false positive rate", ylab = "true positive rate")
setwd("C:/Users/Ningyu Sha/Dropbox/Ningyu Sha/Dropbox/Digging-into-metagenomic-data/SZProjrct/randomforest") #选取储存目录，建议和R工作表分开
future=paste("ROC curve",".jpg")
jpeg(file=future)
plot(fp,tp, type = "o", xlab = "false positive rate", ylab = "true positive rate" )
dev.off()
